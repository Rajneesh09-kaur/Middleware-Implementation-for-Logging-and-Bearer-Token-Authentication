// ==========================================================
// Account Transfer System with Balance Validation in Node.js
// ==========================================================

const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// ==========================================================
// MongoDB Connection
// ==========================================================
mongoose
  .connect("mongodb://127.0.0.1:27017/bankDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB connected successfully"))
  .catch((err) => console.error("❌ MongoDB connection failed:", err));

// ==========================================================
// Account Schema & Model
// ==========================================================
const accountSchema = new mongoose.Schema({
  name: { type: String, required: true },
  balance: { type: Number, required: true, min: 0 },
});

const Account = mongoose.model("Account", accountSchema);

// ==========================================================
// Routes
// ==========================================================

// 🧾 Create new account
app.post("/api/accounts", async (req, res) => {
  try {
    const { name, balance } = req.body;

    if (!name || balance === undefined) {
      return res.status(400).json({ message: "Name and balance are required" });
    }

    const account = new Account({ name, balance });
    await account.save();
    res.status(201).json({ message: "Account created successfully", account });
  } catch (error) {
    res.status(500).json({ message: "Error creating account", error });
  }
});

// 💳 Get all accounts
app.get("/api/accounts", async (req, res) => {
  try {
    const accounts = await Account.find();
    res.status(200).json(accounts);
  } catch (error) {
    res.status(500).json({ message: "Error fetching accounts", error });
  }
});

//  Money Transfer API
app.post("/api/transfer", async (req, res) => {
  try {
    const { from, to, amount } = req.body;

    // Validate input
    if (!from || !to || !amount || amount <= 0) {
      return res
        .status(400)
        .json({ message: "Invalid input. Provide from, to, and positive amount." });
    }

    // Find both accounts
    const sender = await Account.findOne({ name: from });
    const receiver = await Account.findOne({ name: to });

    if (!sender) return res.status(404).json({ message: "Sender account not found" });
    if (!receiver) return res.status(404).json({ message: "Receiver account not found" });

    // Check sufficient balance
    if (sender.balance < amount) {
      return res.status(400).json({ message: "Insufficient balance in sender's account" });
    }

    // Update balances sequentially (no DB transaction)
    sender.balance -= amount;
    receiver.balance += amount;

    // Save updates
    await sender.save();
    await receiver.save();

    res.status(200).json({
      message: "Transfer successful ✅",
      from: sender.name,
      to: receiver.name,
      amount,
      senderBalance: sender.balance,
      receiverBalance: receiver.balance,
    });
  } catch (error) {
    console.error("Error during transfer:", error);
    res.status(500).json({ message: "Internal Server Error", error });
  }
});

// Default route
app.get("/", (req, res) => {
  res.send("🏦 Welcome to the Account Transfer System API (Node.js + MongoDB)");
});

// ==========================================================
// Start the Server
// ==========================================================
const PORT = 3000;
app.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));

